<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite5</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initializing
grav = 0.2;
speed_x = 0;
speed_y = 0;
speed_j = 7;
x_movement_speed = 4;
y_movement_speed = 4;
x_running_speed = 8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Player input
key_right = keyboard_check(ord('D'));
key_left = -keyboard_check(ord('A'));
key_up = -keyboard_check(ord('W'));
key_down = keyboard_check(ord('S'));
key_jump = keyboard_check_pressed(vk_space);

speed_hor_movement = 0;
speed_vert_movement = 0;

// Player Movement
move_hor = key_left + key_right;
speed_x = move_hor * x_movement_speed;
move_vert = key_up + key_down;

// apply gravity
if (speed_y &lt; 10) speed_y += grav;

// jumping
if (place_meeting(x,y+1,par_solid_blocks)) {
    speed_y = key_jump * -speed_j;
}

// Horizontal Collision 
if (place_meeting(x+speed_x,y,par_solid_blocks)) {
    yplus = 0;
    while (place_meeting(x+speed_x,y-yplus,par_solid_blocks) &amp;&amp; yplus &lt;= abs(1*speed_x)) yplus += 1;
    if (place_meeting(x+speed_x,y-yplus,par_solid_blocks)) {
        while (!place_meeting(x+sign(speed_x),y,par_solid_blocks)) {
            x += sign(speed_x);
        }
        speed_x = 0;
    } else {
        y -= yplus;
    }
}
x += speed_x;

// Vertical Collision
if (place_meeting(x,y+speed_y,par_solid_blocks)) {
    while(!place_meeting(x,y+sign(speed_y),par_solid_blocks)) {
        y += sign(speed_y);
    }
    speed_y = 0;
}
y += speed_y;

// Doors
if(place_meeting(x,y,obj_door) &amp;&amp; (key_up == 1)) {
    x = 0;
    y = 0;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
